package com.lannstark.lec04

/**
 * 코틀린에서 연산자를 다루는 방법
 * 단항연산자 / 산술연산자 단항 연산자 ++ -- |산술연산자  + - * / % | 산술 대입 연산자 += -= *= /= %= 자바와 동일
 * 비교연산자와 동등성, 동일성 비교 연산자  동일 단 자바와 다르게 객체를 비교(< , > , <= ,>=)할때 자동으로 compareTo(크기비교)를 호출
 * 동등성(두 객체의 값이 같은가 자바에서 equals 코틀린에선 ==) 동일성(주소가 같은가 자바에서 == 코틀린에선 ===)
 * 논리 연산자(자바와 동일 && || ! 자바처럼 Lazy연산) Lazy연산 뒤에꺼 보지 않고도 결과를 알 수 있으면 예 or연산 앞에 true일때 뒤에꺼 x
 * 코틀린에 있는 특이한 연산자
 *  in / !in 컬렉션이나 범위에 포함되어 있다, 포하뫼어 있지 않다 println(1 in numbers)
 *  a..b a부터 b까지의 범위 객체를 생성한다.
 *  a[i] a에서 특정 index i로 값을 가져온다. val str = "abcd"; println(str[2])//c;
 *  a[i] = b 특정인덱스에 값 넣기
 * 연산자 오버로딩(코틀린은 객체마다 연산자를 직접 정의할 수 있음) 코틀린 클래스 operator 예약어 사용 관련 내용 코틀린 심화편에
 *
 * */

fun main(){
    //단 자바와 다르게 객체를 비교연산자 사용(< , > , <= ,>=)할때 자동으로 compareTo(크기비교)를 호출 더 직관적
    val money1 = JavaMoney(2_000L)
    val money2 = JavaMoney(1_000L)
    if(money1 > money2){
        println("Money1이 Money2보다 큽니다.")
    }
}